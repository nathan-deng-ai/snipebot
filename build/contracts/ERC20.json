{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Context.sol",
    "1": "contracts/ERC20.sol",
    "2": "contracts/IERC20.sol",
    "3": "contracts/IERC20Metadata.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        1378
      ],
      "ERC20": [
        512
      ],
      "IERC20": [
        590
      ],
      "IERC20Metadata": [
        615
      ]
    },
    "id": 513,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:1"
      },
      {
        "absolutePath": "contracts/IERC20.sol",
        "file": "./IERC20.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 513,
        "sourceUnit": 591,
        "src": "58:22:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/IERC20Metadata.sol",
        "file": "./IERC20Metadata.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 513,
        "sourceUnit": 616,
        "src": "81:30:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/Context.sol",
        "file": "./Context.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 513,
        "sourceUnit": 1379,
        "src": "112:23:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1378,
              "src": "1318:7:1"
            },
            "id": 7,
            "nodeType": "InheritanceSpecifier",
            "src": "1318:7:1"
          },
          {
            "baseName": {
              "id": 8,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 590,
              "src": "1327:6:1"
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "1327:6:1"
          },
          {
            "baseName": {
              "id": 10,
              "name": "IERC20Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 615,
              "src": "1335:14:1"
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "1335:14:1"
          }
        ],
        "contractDependencies": [
          590,
          615,
          1378
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 5,
          "nodeType": "StructuredDocumentation",
          "src": "137:1162:1",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 512,
        "linearizedBaseContracts": [
          512,
          615,
          590,
          1378
        ],
        "name": "ERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 15,
            "mutability": "mutable",
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 512,
            "src": "1356:46:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 14,
              "keyType": {
                "id": 12,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1365:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1356:28:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 13,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1376:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 21,
            "mutability": "mutable",
            "name": "_allowances",
            "nodeType": "VariableDeclaration",
            "scope": 512,
            "src": "1409:69:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 20,
              "keyType": {
                "id": 16,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1418:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1409:49:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 19,
                "keyType": {
                  "id": 17,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1438:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1429:28:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 18,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1449:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 23,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "scope": 512,
            "src": "1485:28:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 22,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1485:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25,
            "mutability": "mutable",
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 512,
            "src": "1519:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 24,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1519:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 27,
            "mutability": "mutable",
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 512,
            "src": "1545:22:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 26,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1545:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 49,
              "nodeType": "Block",
              "src": "1952:94:1",
              "statements": [
                {
                  "expression": {
                    "id": 39,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 37,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25,
                      "src": "1962:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 38,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "1970:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1962:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 40,
                  "nodeType": "ExpressionStatement",
                  "src": "1962:13:1"
                },
                {
                  "expression": {
                    "id": 43,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 41,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27,
                      "src": "1985:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 42,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32,
                      "src": "1995:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1985:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 44,
                  "nodeType": "ExpressionStatement",
                  "src": "1985:17:1"
                },
                {
                  "expression": {
                    "id": 47,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 45,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "2012:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 46,
                      "name": "totalSupply_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "2027:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2012:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 48,
                  "nodeType": "ExpressionStatement",
                  "src": "2012:27:1"
                }
              ]
            },
            "documentation": {
              "id": 28,
              "nodeType": "StructuredDocumentation",
              "src": "1574:297:1",
              "text": " @dev Sets the values for {name} and {symbol}.\n The defaut value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 50,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "name_",
                  "nodeType": "VariableDeclaration",
                  "scope": 50,
                  "src": "1889:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1889:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nodeType": "VariableDeclaration",
                  "scope": 50,
                  "src": "1910:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1910:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34,
                  "mutability": "mutable",
                  "name": "totalSupply_",
                  "nodeType": "VariableDeclaration",
                  "scope": 50,
                  "src": "1933:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1933:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1888:63:1"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1952:0:1"
            },
            "scope": 512,
            "src": "1876:170:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              602
            ],
            "body": {
              "id": 59,
              "nodeType": "Block",
              "src": "2180:29:1",
              "statements": [
                {
                  "expression": {
                    "id": 57,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25,
                    "src": "2197:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 56,
                  "id": 58,
                  "nodeType": "Return",
                  "src": "2190:12:1"
                }
              ]
            },
            "documentation": {
              "id": 51,
              "nodeType": "StructuredDocumentation",
              "src": "2052:54:1",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 60,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 53,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2147:8:1"
            },
            "parameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2124:2:1"
            },
            "returnParameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 60,
                  "src": "2165:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2165:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2164:15:1"
            },
            "scope": 512,
            "src": "2111:98:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              608
            ],
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "2393:31:1",
              "statements": [
                {
                  "expression": {
                    "id": 67,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 27,
                    "src": "2410:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 66,
                  "id": 68,
                  "nodeType": "Return",
                  "src": "2403:14:1"
                }
              ]
            },
            "documentation": {
              "id": 61,
              "nodeType": "StructuredDocumentation",
              "src": "2215:102:1",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 70,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 63,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2360:8:1"
            },
            "parameters": {
              "id": 62,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2337:2:1"
            },
            "returnParameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "2378:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 64,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2378:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2377:15:1"
            },
            "scope": 512,
            "src": "2322:102:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              614
            ],
            "body": {
              "id": 79,
              "nodeType": "Block",
              "src": "3113:26:1",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 77,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3130:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 76,
                  "id": 78,
                  "nodeType": "Return",
                  "src": "3123:9:1"
                }
              ]
            },
            "documentation": {
              "id": 71,
              "nodeType": "StructuredDocumentation",
              "src": "2430:613:1",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 80,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 73,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3088:8:1"
            },
            "parameters": {
              "id": 72,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3065:2:1"
            },
            "returnParameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 80,
                  "src": "3106:5:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 74,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3106:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3105:7:1"
            },
            "scope": 512,
            "src": "3048:91:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              521
            ],
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "3269:36:1",
              "statements": [
                {
                  "expression": {
                    "id": 87,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 23,
                    "src": "3286:12:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 86,
                  "id": 88,
                  "nodeType": "Return",
                  "src": "3279:19:1"
                }
              ]
            },
            "documentation": {
              "id": 81,
              "nodeType": "StructuredDocumentation",
              "src": "3145:49:1",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 83,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3242:8:1"
            },
            "parameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3219:2:1"
            },
            "returnParameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 90,
                  "src": "3260:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3260:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3259:9:1"
            },
            "scope": 512,
            "src": "3199:106:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              529
            ],
            "body": {
              "id": 103,
              "nodeType": "Block",
              "src": "3446:42:1",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 99,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "3463:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 101,
                    "indexExpression": {
                      "id": 100,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 93,
                      "src": "3473:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3463:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 98,
                  "id": 102,
                  "nodeType": "Return",
                  "src": "3456:25:1"
                }
              ]
            },
            "documentation": {
              "id": 91,
              "nodeType": "StructuredDocumentation",
              "src": "3311:47:1",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 104,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 95,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3419:8:1"
            },
            "parameters": {
              "id": 94,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 93,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 104,
                  "src": "3382:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 92,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3382:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3381:17:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 97,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 104,
                  "src": "3437:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 96,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3437:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3436:9:1"
            },
            "scope": 512,
            "src": "3363:125:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              539
            ],
            "body": {
              "id": 124,
              "nodeType": "Block",
              "src": "3783:80:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 116,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "3803:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3803:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 118,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "3817:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 119,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 109,
                        "src": "3828:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 115,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 346,
                      "src": "3793:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3793:42:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "3793:42:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3852:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 114,
                  "id": 123,
                  "nodeType": "Return",
                  "src": "3845:11:1"
                }
              ]
            },
            "documentation": {
              "id": 105,
              "nodeType": "StructuredDocumentation",
              "src": "3494:192:1",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "a9059cbb",
            "id": 125,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 111,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3759:8:1"
            },
            "parameters": {
              "id": 110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 125,
                  "src": "3709:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3709:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 109,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 125,
                  "src": "3728:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3728:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3708:35:1"
            },
            "returnParameters": {
              "id": 114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 113,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 125,
                  "src": "3777:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 112,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3777:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3776:6:1"
            },
            "scope": 512,
            "src": "3691:172:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              549
            ],
            "body": {
              "id": 142,
              "nodeType": "Block",
              "src": "4019:51:1",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 136,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "4036:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 138,
                      "indexExpression": {
                        "id": 137,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "4048:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4036:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 140,
                    "indexExpression": {
                      "id": 139,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 130,
                      "src": "4055:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4036:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 135,
                  "id": 141,
                  "nodeType": "Return",
                  "src": "4029:34:1"
                }
              ]
            },
            "documentation": {
              "id": 126,
              "nodeType": "StructuredDocumentation",
              "src": "3869:47:1",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 143,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 132,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3992:8:1"
            },
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 143,
                  "src": "3940:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3940:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 143,
                  "src": "3955:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3955:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3939:32:1"
            },
            "returnParameters": {
              "id": 135,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 143,
                  "src": "4010:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4010:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4009:9:1"
            },
            "scope": 512,
            "src": "3921:149:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              559
            ],
            "body": {
              "id": 163,
              "nodeType": "Block",
              "src": "4297:77:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 155,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "4316:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4316:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 157,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 146,
                        "src": "4330:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 158,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "4339:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 154,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 500,
                      "src": "4307:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 159,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4307:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 160,
                  "nodeType": "ExpressionStatement",
                  "src": "4307:39:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4363:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 153,
                  "id": 162,
                  "nodeType": "Return",
                  "src": "4356:11:1"
                }
              ]
            },
            "documentation": {
              "id": 144,
              "nodeType": "StructuredDocumentation",
              "src": "4076:127:1",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 164,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 150,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4273:8:1"
            },
            "parameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 146,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 164,
                  "src": "4225:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 145,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4225:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 148,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 164,
                  "src": "4242:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 147,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4242:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4224:33:1"
            },
            "returnParameters": {
              "id": 153,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 152,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 164,
                  "src": "4291:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 151,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4291:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4290:6:1"
            },
            "scope": 512,
            "src": "4208:166:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              571
            ],
            "body": {
              "id": 210,
              "nodeType": "Block",
              "src": "4953:302:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 178,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 167,
                        "src": "4973:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 179,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 169,
                        "src": "4981:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 180,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 171,
                        "src": "4992:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 177,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 346,
                      "src": "4963:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4963:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 182,
                  "nodeType": "ExpressionStatement",
                  "src": "4963:36:1"
                },
                {
                  "assignments": [
                    184
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 184,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 210,
                      "src": "5010:24:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 183,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5010:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 191,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 185,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "5037:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 187,
                      "indexExpression": {
                        "id": 186,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 167,
                        "src": "5049:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5037:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 190,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 188,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1366,
                        "src": "5057:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                          "typeString": "function () view returns (address payable)"
                        }
                      },
                      "id": 189,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5057:12:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5037:33:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5010:60:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 193,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 184,
                          "src": "5088:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 194,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 171,
                          "src": "5108:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5088:26:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 196,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5116:42:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 192,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5080:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 197,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5080:79:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 198,
                  "nodeType": "ExpressionStatement",
                  "src": "5080:79:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 200,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 167,
                        "src": "5178:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 201,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "5186:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5186:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 203,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 184,
                          "src": "5200:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 204,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 171,
                          "src": "5219:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5200:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 199,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 500,
                      "src": "5169:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 206,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5169:57:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 207,
                  "nodeType": "ExpressionStatement",
                  "src": "5169:57:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 208,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5244:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 176,
                  "id": 209,
                  "nodeType": "Return",
                  "src": "5237:11:1"
                }
              ]
            },
            "documentation": {
              "id": 165,
              "nodeType": "StructuredDocumentation",
              "src": "4380:456:1",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 211,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 173,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4929:8:1"
            },
            "parameters": {
              "id": 172,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 167,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "4863:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4863:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 169,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "4879:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 168,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4879:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "4898:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4898:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4862:51:1"
            },
            "returnParameters": {
              "id": 176,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 175,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "4947:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 174,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4947:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4946:6:1"
            },
            "scope": 512,
            "src": "4841:414:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 237,
              "nodeType": "Block",
              "src": "5744:118:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 222,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "5763:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 223,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5763:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 224,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "5777:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 225,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "5786:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 228,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 226,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1366,
                                "src": "5798:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                  "typeString": "function () view returns (address payable)"
                                }
                              },
                              "id": 227,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5798:12:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5786:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 230,
                          "indexExpression": {
                            "id": 229,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 214,
                            "src": "5812:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5786:34:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 231,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 216,
                          "src": "5823:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5786:47:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 221,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 500,
                      "src": "5754:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 233,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5754:80:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 234,
                  "nodeType": "ExpressionStatement",
                  "src": "5754:80:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 235,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5851:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 220,
                  "id": 236,
                  "nodeType": "Return",
                  "src": "5844:11:1"
                }
              ]
            },
            "documentation": {
              "id": 212,
              "nodeType": "StructuredDocumentation",
              "src": "5261:384:1",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 238,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 217,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 214,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "5677:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 213,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5677:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 216,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "5694:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5694:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5676:37:1"
            },
            "returnParameters": {
              "id": 220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 219,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "5738:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 218,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5738:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5737:6:1"
            },
            "scope": 512,
            "src": "5650:212:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 275,
              "nodeType": "Block",
              "src": "6448:272:1",
              "statements": [
                {
                  "assignments": [
                    249
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 249,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 275,
                      "src": "6458:24:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 248,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6458:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 256,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 250,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "6485:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 253,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 251,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "6497:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 252,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6497:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6485:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 255,
                    "indexExpression": {
                      "id": 254,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 241,
                      "src": "6511:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6485:34:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6458:61:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 260,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 258,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 249,
                          "src": "6537:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 259,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 243,
                          "src": "6557:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6537:35:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6574:39:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 257,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6529:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6529:85:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 263,
                  "nodeType": "ExpressionStatement",
                  "src": "6529:85:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 265,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1366,
                          "src": "6633:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6633:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 267,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 241,
                        "src": "6647:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 270,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 268,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 249,
                          "src": "6656:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 269,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 243,
                          "src": "6675:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6656:34:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 264,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 500,
                      "src": "6624:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 271,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6624:67:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 272,
                  "nodeType": "ExpressionStatement",
                  "src": "6624:67:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6709:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 247,
                  "id": 274,
                  "nodeType": "Return",
                  "src": "6702:11:1"
                }
              ]
            },
            "documentation": {
              "id": 239,
              "nodeType": "StructuredDocumentation",
              "src": "5868:476:1",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 276,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 241,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 276,
                  "src": "6376:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6376:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 243,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 276,
                  "src": "6393:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 242,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6393:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6375:42:1"
            },
            "returnParameters": {
              "id": 247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 246,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 276,
                  "src": "6442:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 245,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6442:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6441:6:1"
            },
            "scope": 512,
            "src": "6349:371:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 345,
              "nodeType": "Block",
              "src": "7281:505:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 292,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 287,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "7299:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7317:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 289,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7309:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 288,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7309:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7309:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7299:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7321:39:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 286,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7291:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7291:70:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 295,
                  "nodeType": "ExpressionStatement",
                  "src": "7291:70:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 297,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 281,
                          "src": "7379:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7400:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 299,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7392:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 298,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7392:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7392:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7379:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7404:37:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 296,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7371:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7371:71:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 305,
                  "nodeType": "ExpressionStatement",
                  "src": "7371:71:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 307,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "7474:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 308,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "7482:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 309,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "7493:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 306,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "7453:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7453:47:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 311,
                  "nodeType": "ExpressionStatement",
                  "src": "7453:47:1"
                },
                {
                  "assignments": [
                    313
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 313,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 345,
                      "src": "7511:21:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 312,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7511:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 317,
                  "initialValue": {
                    "baseExpression": {
                      "id": 314,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "7535:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 316,
                    "indexExpression": {
                      "id": 315,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 279,
                      "src": "7545:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7535:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7511:41:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 319,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 313,
                          "src": "7570:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 320,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 283,
                          "src": "7587:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7570:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7595:40:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 318,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7562:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7562:74:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 324,
                  "nodeType": "ExpressionStatement",
                  "src": "7562:74:1"
                },
                {
                  "expression": {
                    "id": 331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 325,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "7646:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 327,
                      "indexExpression": {
                        "id": 326,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "7656:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7646:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 328,
                        "name": "senderBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 313,
                        "src": "7666:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 329,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "7682:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7666:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7646:42:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 332,
                  "nodeType": "ExpressionStatement",
                  "src": "7646:42:1"
                },
                {
                  "expression": {
                    "id": 337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 333,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "7698:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 335,
                      "indexExpression": {
                        "id": 334,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "7708:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7698:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 336,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 283,
                      "src": "7722:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7698:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 338,
                  "nodeType": "ExpressionStatement",
                  "src": "7698:30:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 340,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "7753:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 341,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "7761:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 342,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "7772:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 339,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 580,
                      "src": "7744:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7744:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 344,
                  "nodeType": "EmitStatement",
                  "src": "7739:40:1"
                }
              ]
            },
            "documentation": {
              "id": 277,
              "nodeType": "StructuredDocumentation",
              "src": "6726:463:1",
              "text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 346,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 284,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 346,
                  "src": "7213:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7213:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 281,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 346,
                  "src": "7229:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 280,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7229:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 346,
                  "src": "7248:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7248:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7212:51:1"
            },
            "returnParameters": {
              "id": 285,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7281:0:1"
            },
            "scope": 512,
            "src": "7194:592:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 392,
              "nodeType": "Block",
              "src": "8122:265:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 355,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 349,
                          "src": "8140:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 358,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8159:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 357,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8151:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 356,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8151:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 359,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8151:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8140:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8163:33:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 354,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8132:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 362,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8132:65:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 363,
                  "nodeType": "ExpressionStatement",
                  "src": "8132:65:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 367,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8237:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8229:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 365,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8229:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 368,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8229:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 369,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "8241:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 370,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 351,
                        "src": "8250:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 364,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "8208:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8208:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 372,
                  "nodeType": "ExpressionStatement",
                  "src": "8208:49:1"
                },
                {
                  "expression": {
                    "id": 375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 373,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "8268:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 374,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "8284:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8268:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 376,
                  "nodeType": "ExpressionStatement",
                  "src": "8268:22:1"
                },
                {
                  "expression": {
                    "id": 381,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 377,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "8300:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 379,
                      "indexExpression": {
                        "id": 378,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "8310:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8300:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 380,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 351,
                      "src": "8322:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8300:28:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 382,
                  "nodeType": "ExpressionStatement",
                  "src": "8300:28:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 386,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8360:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8352:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 384,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8352:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8352:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 388,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "8364:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 389,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 351,
                        "src": "8373:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 383,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 580,
                      "src": "8343:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8343:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 391,
                  "nodeType": "EmitStatement",
                  "src": "8338:42:1"
                }
              ]
            },
            "documentation": {
              "id": 347,
              "nodeType": "StructuredDocumentation",
              "src": "7792:260:1",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
            },
            "id": 393,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 352,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 349,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 393,
                  "src": "8072:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 348,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8072:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 351,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 393,
                  "src": "8089:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 350,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8089:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8071:33:1"
            },
            "returnParameters": {
              "id": 353,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8122:0:1"
            },
            "scope": 512,
            "src": "8057:330:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 454,
              "nodeType": "Block",
              "src": "8772:418:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 402,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 396,
                          "src": "8790:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 405,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8809:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8801:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 403,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8801:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8801:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8790:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8813:35:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 401,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8782:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 409,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8782:67:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 410,
                  "nodeType": "ExpressionStatement",
                  "src": "8782:67:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 412,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "8881:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 415,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8898:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8890:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 413,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8890:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 416,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8890:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 417,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "8902:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 411,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "8860:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8860:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 419,
                  "nodeType": "ExpressionStatement",
                  "src": "8860:49:1"
                },
                {
                  "assignments": [
                    421
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 421,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 454,
                      "src": "8920:22:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 420,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8920:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 425,
                  "initialValue": {
                    "baseExpression": {
                      "id": 422,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "8945:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 424,
                    "indexExpression": {
                      "id": 423,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 396,
                      "src": "8955:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8945:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8920:43:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 429,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 427,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 421,
                          "src": "8981:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 428,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 398,
                          "src": "8999:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8981:24:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9007:36:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 426,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8973:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8973:71:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 432,
                  "nodeType": "ExpressionStatement",
                  "src": "8973:71:1"
                },
                {
                  "expression": {
                    "id": 439,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 433,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "9054:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 435,
                      "indexExpression": {
                        "id": 434,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "9064:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9054:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 438,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 436,
                        "name": "accountBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 421,
                        "src": "9075:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 437,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "9092:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9075:23:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9054:44:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 440,
                  "nodeType": "ExpressionStatement",
                  "src": "9054:44:1"
                },
                {
                  "expression": {
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 441,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "9108:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 442,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 398,
                      "src": "9124:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9108:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "9108:22:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 446,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "9155:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 449,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9172:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9164:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 447,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9164:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 450,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9164:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 451,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "9176:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 445,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 580,
                      "src": "9146:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 452,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9146:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 453,
                  "nodeType": "EmitStatement",
                  "src": "9141:42:1"
                }
              ]
            },
            "documentation": {
              "id": 394,
              "nodeType": "StructuredDocumentation",
              "src": "8393:309:1",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 455,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 396,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "8722:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 395,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8722:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 398,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "8739:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8739:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8721:33:1"
            },
            "returnParameters": {
              "id": 400,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8772:0:1"
            },
            "scope": 512,
            "src": "8707:483:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 499,
              "nodeType": "Block",
              "src": "9696:257:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 471,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 466,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 458,
                          "src": "9714:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 469,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9731:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 468,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9723:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 467,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9723:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9723:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9714:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 472,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9735:38:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 465,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9706:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 473,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9706:68:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 474,
                  "nodeType": "ExpressionStatement",
                  "src": "9706:68:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 476,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 460,
                          "src": "9792:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 479,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9811:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 478,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9803:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 477,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9803:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9803:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9792:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9815:36:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9784:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9784:68:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 484,
                  "nodeType": "ExpressionStatement",
                  "src": "9784:68:1"
                },
                {
                  "expression": {
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 485,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21,
                          "src": "9863:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 488,
                        "indexExpression": {
                          "id": 486,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 458,
                          "src": "9875:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9863:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 489,
                      "indexExpression": {
                        "id": 487,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 460,
                        "src": "9882:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9863:27:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 490,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 462,
                      "src": "9893:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9863:36:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 492,
                  "nodeType": "ExpressionStatement",
                  "src": "9863:36:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 494,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 458,
                        "src": "9923:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 495,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 460,
                        "src": "9930:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 496,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 462,
                        "src": "9939:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 493,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 589,
                      "src": "9914:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9914:32:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 498,
                  "nodeType": "EmitStatement",
                  "src": "9909:37:1"
                }
              ]
            },
            "documentation": {
              "id": 456,
              "nodeType": "StructuredDocumentation",
              "src": "9196:412:1",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 500,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 458,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "9631:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 457,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9631:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 460,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "9646:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 459,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9646:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 462,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 500,
                  "src": "9663:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 461,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9663:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9630:48:1"
            },
            "returnParameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9696:0:1"
            },
            "scope": 512,
            "src": "9613:340:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 510,
              "nodeType": "Block",
              "src": "10629:3:1",
              "statements": []
            },
            "documentation": {
              "id": 501,
              "nodeType": "StructuredDocumentation",
              "src": "9959:576:1",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 511,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 508,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 503,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "10570:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 502,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10570:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 505,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "10584:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 504,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10584:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 507,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "10596:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 506,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10596:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10569:42:1"
            },
            "returnParameters": {
              "id": 509,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10629:0:1"
            },
            "scope": 512,
            "src": "10540:92:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 513,
        "src": "1300:9334:1"
      }
    ],
    "src": "33:10601:1"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000c7038038062000c708339810160408190526200003491620001bd565b8251620000499060039060208601906200006c565b5081516200005f9060049060208501906200006c565b5060025550620002809050565b8280546200007a906200022d565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b600082601f83011262000123578081fd5b81516001600160401b03808211156200014057620001406200026a565b6040516020601f8401601f19168201810183811183821017156200016857620001686200026a565b60405283825285840181018710156200017f578485fd5b8492505b83831015620001a2578583018101518284018201529182019162000183565b83831115620001b357848185840101525b5095945050505050565b600080600060608486031215620001d2578283fd5b83516001600160401b0380821115620001e9578485fd5b620001f78783880162000112565b945060208601519150808211156200020d578384fd5b506200021c8682870162000112565b925050604084015190509250925092565b6002810460018216806200024257607f821691505b602082108114156200026457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6109e080620002906000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106df565b60405180910390f35b6100df6100da3660046106ab565b610222565b6040516100c391906106d4565b6100f461023f565b6040516100c39190610913565b6100df61010f366004610670565b610245565b61011c6102e5565b6040516100c3919061091c565b6100df6101373660046106ab565b6102ea565b6100f461014a36600461061d565b610339565b6100b6610358565b6100df6101653660046106ab565b610367565b6100df6101783660046106ab565b6103e2565b6100f461018b36600461063e565b6103f6565b60606003805461019f90610959565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610959565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610421565b8484610425565b50600192915050565b60025490565b60006102528484846104d9565b6001600160a01b038416600090815260016020526040812081610273610421565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fd565b60405180910390fd5b6102da856102cb610421565b6102d58685610942565b610425565b506001949350505050565b601290565b60006102366102f7610421565b848460016000610305610421565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546102d5919061092a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610959565b60008060016000610376610421565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c25760405162461bcd60e51b81526004016102b6906108ce565b6103d86103cd610421565b856102d58685610942565b5060019392505050565b60006102366103ef610421565b84846104d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661044b5760405162461bcd60e51b81526004016102b69061088a565b6001600160a01b0382166104715760405162461bcd60e51b81526004016102b690610775565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104cc908590610913565b60405180910390a3505050565b6001600160a01b0383166104ff5760405162461bcd60e51b81526004016102b690610845565b6001600160a01b0382166105255760405162461bcd60e51b81526004016102b690610732565b610530838383610601565b6001600160a01b038316600090815260208190526040902054818110156105695760405162461bcd60e51b81526004016102b6906107b7565b6105738282610942565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906105a990849061092a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f39190610913565b60405180910390a350505050565b505050565b80356001600160a01b038116811461035357600080fd5b60006020828403121561062e578081fd5b61063782610606565b9392505050565b60008060408385031215610650578081fd5b61065983610606565b915061066760208401610606565b90509250929050565b600080600060608486031215610684578081fd5b61068d84610606565b925061069b60208501610606565b9150604084013590509250925092565b600080604083850312156106bd578182fd5b6106c683610606565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561070b578581018301518582016040015282016106ef565b8181111561071c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561093d5761093d610994565b500190565b60008282101561095457610954610994565b500390565b60028104600182168061096d57607f821691505b6020821081141561098e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f1bff42eddeda5c8413794d59b99c4689f40bb9347f4836c1c65df66c91f8e6864736f6c63430008000033",
  "bytecodeSha1": "663d8253ce4ce7007f9ec1ab4d51d033d02047f1",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {
        "ERC20._approve": {
          "31": [
            9714,
            9733,
            true
          ],
          "32": [
            9792,
            9813,
            true
          ]
        },
        "ERC20._transfer": {
          "33": [
            7299,
            7319,
            true
          ],
          "34": [
            7379,
            7402,
            true
          ],
          "35": [
            7570,
            7593,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "30": [
            6537,
            6572,
            true
          ]
        },
        "ERC20.transferFrom": {
          "29": [
            5088,
            5114,
            true
          ]
        }
      },
      "2": {},
      "3": {}
    },
    "statements": {
      "0": {
        "Context._msgSender": {
          "17": [
            694,
            720
          ]
        }
      },
      "1": {
        "ERC20._approve": {
          "18": [
            9706,
            9774
          ],
          "19": [
            9784,
            9852
          ],
          "20": [
            9863,
            9899
          ],
          "21": [
            9909,
            9946
          ]
        },
        "ERC20._transfer": {
          "22": [
            7291,
            7361
          ],
          "23": [
            7371,
            7442
          ],
          "24": [
            7453,
            7500
          ],
          "25": [
            7562,
            7636
          ],
          "26": [
            7646,
            7688
          ],
          "27": [
            7698,
            7728
          ],
          "28": [
            7739,
            7779
          ]
        },
        "ERC20.allowance": {
          "16": [
            4029,
            4063
          ]
        },
        "ERC20.approve": {
          "1": [
            4307,
            4346
          ],
          "2": [
            4356,
            4367
          ]
        },
        "ERC20.balanceOf": {
          "10": [
            3456,
            3481
          ]
        },
        "ERC20.decimals": {
          "8": [
            3123,
            3132
          ]
        },
        "ERC20.decreaseAllowance": {
          "12": [
            6529,
            6614
          ],
          "13": [
            6624,
            6691
          ],
          "14": [
            6702,
            6713
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5754,
            5834
          ]
        },
        "ERC20.name": {
          "0": [
            2190,
            2202
          ]
        },
        "ERC20.symbol": {
          "11": [
            2403,
            2417
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3279,
            3298
          ]
        },
        "ERC20.transfer": {
          "15": [
            3793,
            3835
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            4963,
            4999
          ],
          "5": [
            5080,
            5159
          ],
          "6": [
            5169,
            5226
          ],
          "7": [
            5237,
            5248
          ]
        }
      },
      "2": {},
      "3": {}
    }
  },
  "dependencies": [
    "Context",
    "IERC20",
    "IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106df565b60405180910390f35b6100df6100da3660046106ab565b610222565b6040516100c391906106d4565b6100f461023f565b6040516100c39190610913565b6100df61010f366004610670565b610245565b61011c6102e5565b6040516100c3919061091c565b6100df6101373660046106ab565b6102ea565b6100f461014a36600461061d565b610339565b6100b6610358565b6100df6101653660046106ab565b610367565b6100df6101783660046106ab565b6103e2565b6100f461018b36600461063e565b6103f6565b60606003805461019f90610959565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610959565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610421565b8484610425565b50600192915050565b60025490565b60006102528484846104d9565b6001600160a01b038416600090815260016020526040812081610273610421565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fd565b60405180910390fd5b6102da856102cb610421565b6102d58685610942565b610425565b506001949350505050565b601290565b60006102366102f7610421565b848460016000610305610421565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546102d5919061092a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610959565b60008060016000610376610421565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c25760405162461bcd60e51b81526004016102b6906108ce565b6103d86103cd610421565b856102d58685610942565b5060019392505050565b60006102366103ef610421565b84846104d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661044b5760405162461bcd60e51b81526004016102b69061088a565b6001600160a01b0382166104715760405162461bcd60e51b81526004016102b690610775565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104cc908590610913565b60405180910390a3505050565b6001600160a01b0383166104ff5760405162461bcd60e51b81526004016102b690610845565b6001600160a01b0382166105255760405162461bcd60e51b81526004016102b690610732565b610530838383610601565b6001600160a01b038316600090815260208190526040902054818110156105695760405162461bcd60e51b81526004016102b6906107b7565b6105738282610942565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906105a990849061092a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f39190610913565b60405180910390a350505050565b505050565b80356001600160a01b038116811461035357600080fd5b60006020828403121561062e578081fd5b61063782610606565b9392505050565b60008060408385031215610650578081fd5b61065983610606565b915061066760208401610606565b90509250929050565b600080600060608486031215610684578081fd5b61068d84610606565b925061069b60208501610606565b9150604084013590509250925092565b600080604083850312156106bd578182fd5b6106c683610606565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561070b578581018301518582016040015282016106ef565b8181111561071c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561093d5761093d610994565b500190565b60008282101561095457610954610994565b500390565b60028104600182168061096d57607f821691505b6020821081141561098e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f1bff42eddeda5c8413794d59b99c4689f40bb9347f4836c1c65df66c91f8e6864736f6c63430008000033",
  "deployedSourceMap": "1300:9334:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4208:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3199:106::-;;;:::i;:::-;;;;;;;:::i;4841:414::-;;;;;;:::i;:::-;;:::i;3048:91::-;;;:::i;:::-;;;;;;;:::i;5650:212::-;;;;;;:::i;:::-;;:::i;3363:125::-;;;;;;:::i;:::-;;:::i;2322:102::-;;;:::i;6349:371::-;;;;;;:::i;:::-;;:::i;3691:172::-;;;;;;:::i;:::-;;:::i;3921:149::-;;;;;;:::i;:::-;;:::i;2111:98::-;2165:13;2197:5;2190:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:98;:::o;4208:166::-;4291:4;4307:39;4316:12;:10;:12::i;:::-;4330:7;4339:6;4307:8;:39::i;:::-;-1:-1:-1;4363:4:1;4208:166;;;;:::o;3199:106::-;3286:12;;3199:106;:::o;4841:414::-;4947:4;4963:36;4973:6;4981:9;4992:6;4963:9;:36::i;:::-;-1:-1:-1;;;;;5037:19:1;;5010:24;5037:19;;;:11;:19;;;;;5010:24;5057:12;:10;:12::i;:::-;-1:-1:-1;;;;;5037:33:1;-1:-1:-1;;;;;5037:33:1;;;;;;;;;;;;;5010:60;;5108:6;5088:16;:26;;5080:79;;;;-1:-1:-1;;;5080:79:1;;;;;;;:::i;:::-;;;;;;;;;5169:57;5178:6;5186:12;:10;:12::i;:::-;5200:25;5219:6;5200:16;:25;:::i;:::-;5169:8;:57::i;:::-;-1:-1:-1;5244:4:1;;4841:414;-1:-1:-1;;;;4841:414:1:o;3048:91::-;3130:2;3048:91;:::o;5650:212::-;5738:4;5754:80;5763:12;:10;:12::i;:::-;5777:7;5823:10;5786:11;:25;5798:12;:10;:12::i;:::-;-1:-1:-1;;;;;5786:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;5786:25:1;;;:34;;;;;;;;;;:47;;;;:::i;3363:125::-;-1:-1:-1;;;;;3463:18:1;;3437:7;3463:18;;;;;;;;;;;3363:125;;;;:::o;2322:102::-;2378:13;2410:7;2403:14;;;;;:::i;6349:371::-;6442:4;6458:24;6485:11;:25;6497:12;:10;:12::i;:::-;-1:-1:-1;;;;;6485:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;6485:25:1;;;:34;;;;;;;;;;;-1:-1:-1;6537:35:1;;;;6529:85;;;;-1:-1:-1;;;6529:85:1;;;;;;;:::i;:::-;6624:67;6633:12;:10;:12::i;:::-;6647:7;6656:34;6675:15;6656:16;:34;:::i;6624:67::-;-1:-1:-1;6709:4:1;;6349:371;-1:-1:-1;;;6349:371:1:o;3691:172::-;3777:4;3793:42;3803:12;:10;:12::i;:::-;3817:9;3828:6;3793:9;:42::i;3921:149::-;-1:-1:-1;;;;;4036:18:1;;;4010:7;4036:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3921:149::o;613:115:0:-;709:10;613:115;:::o;9613:340:1:-;-1:-1:-1;;;;;9714:19:1;;9706:68;;;;-1:-1:-1;;;9706:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;9792:21:1;;9784:68;;;;-1:-1:-1;;;9784:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;9863:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;9914:32;;;;;9893:6;;9914:32;:::i;:::-;;;;;;;;9613:340;;;:::o;7194:592::-;-1:-1:-1;;;;;7299:20:1;;7291:70;;;;-1:-1:-1;;;7291:70:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7379:23:1;;7371:71;;;;-1:-1:-1;;;7371:71:1;;;;;;;:::i;:::-;7453:47;7474:6;7482:9;7493:6;7453:20;:47::i;:::-;-1:-1:-1;;;;;7535:17:1;;7511:21;7535:17;;;;;;;;;;;7570:23;;;;7562:74;;;;-1:-1:-1;;;7562:74:1;;;;;;;:::i;:::-;7666:22;7682:6;7666:13;:22;:::i;:::-;-1:-1:-1;;;;;7646:17:1;;;:9;:17;;;;;;;;;;;:42;;;;7698:20;;;;;;;;:30;;7722:6;;7646:9;7698:30;;7722:6;;7698:30;:::i;:::-;;;;;;;;7761:9;-1:-1:-1;;;;;7744:35:1;7753:6;-1:-1:-1;;;;;7744:35:1;;7772:6;7744:35;;;;;;:::i;:::-;;;;;;;;7194:592;;;;:::o;10540:92::-;;;;:::o;14:175:6:-;84:20;;-1:-1:-1;;;;;133:31:6;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:6:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:6:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:6;2052:15;-1:-1:-1;;2048:29:6;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:6:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:6;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:6;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:402::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:34;3176:2;3161:18;;3154:62;-1:-1:-1;;;3247:2:6;3232:18;;3225:36;3293:3;3278:19;;3075:228::o;3308:404::-;3510:2;3492:21;;;3549:2;3529:18;;;3522:30;3588:34;3583:2;3568:18;;3561:62;-1:-1:-1;;;3654:2:6;3639:18;;3632:38;3702:3;3687:19;;3482:230::o;3717:401::-;3919:2;3901:21;;;3958:2;3938:18;;;3931:30;3997:34;3992:2;3977:18;;3970:62;-1:-1:-1;;;4063:2:6;4048:18;;4041:35;4108:3;4093:19;;3891:227::o;4123:400::-;4325:2;4307:21;;;4364:2;4344:18;;;4337:30;4403:34;4398:2;4383:18;;4376:62;-1:-1:-1;;;4469:2:6;4454:18;;4447:34;4513:3;4498:19;;4297:226::o;4528:401::-;4730:2;4712:21;;;4769:2;4749:18;;;4742:30;4808:34;4803:2;4788:18;;4781:62;-1:-1:-1;;;4874:2:6;4859:18;;4852:35;4919:3;4904:19;;4702:227::o;4934:177::-;5080:25;;;5068:2;5053:18;;5035:76::o;5116:184::-;5288:4;5276:17;;;;5258:36;;5246:2;5231:18;;5213:87::o;5305:128::-;;5376:1;5372:6;5369:1;5366:13;5363:2;;;5382:18;;:::i;:::-;-1:-1:-1;5418:9:6;;5353:80::o;5438:125::-;;5506:1;5503;5500:8;5497:2;;;5511:18;;:::i;:::-;-1:-1:-1;5548:9:6;;5487:76::o;5568:380::-;5653:1;5643:12;;5700:1;5690:12;;;5711:2;;5765:4;5757:6;5753:17;5743:27;;5711:2;5818;5810:6;5807:14;5787:18;5784:38;5781:2;;;5864:10;5859:3;5855:20;5852:1;5845:31;5899:4;5896:1;5889:15;5927:4;5924:1;5917:15;5781:2;;5623:325;;;:::o;5953:127::-;6014:10;6009:3;6005:20;6002:1;5995:31;6045:4;6042:1;6035:15;6069:4;6066:1;6059:15",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The defaut value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1300,
    10634
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x91C JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x61D JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x358 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x63E JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x959 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x959 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x425 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x273 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DA DUP6 PUSH2 0x2CB PUSH2 0x421 JUMP JUMPDEST PUSH2 0x2D5 DUP7 DUP6 PUSH2 0x942 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2F7 PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x305 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x376 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x8CE JUMP JUMPDEST PUSH2 0x3D8 PUSH2 0x3CD PUSH2 0x421 JUMP JUMPDEST DUP6 PUSH2 0x2D5 DUP7 DUP6 PUSH2 0x942 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x3EF PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x44B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x471 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4CC SWAP1 DUP6 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x732 JUMP JUMPDEST PUSH2 0x530 DUP4 DUP4 DUP4 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x569 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0x573 DUP3 DUP3 PUSH2 0x942 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x5A9 SWAP1 DUP5 SWAP1 PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5F3 SWAP2 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x62E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x637 DUP3 PUSH2 0x606 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x650 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x659 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH2 0x667 PUSH1 0x20 DUP5 ADD PUSH2 0x606 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x684 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x68D DUP5 PUSH2 0x606 JUMP JUMPDEST SWAP3 POP PUSH2 0x69B PUSH1 0x20 DUP6 ADD PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6BD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6C6 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x70B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6EF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x71C JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x93D JUMPI PUSH2 0x93D PUSH2 0x994 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x954 JUMPI PUSH2 0x954 PUSH2 0x994 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x96D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x98E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xBF DELEGATECALL 0x2E 0xDD 0xED 0xA5 0xC8 COINBASE CALLDATACOPY SWAP5 0xD5 SWAP12 SWAP10 0xC4 PUSH9 0x9F40BB9347F4836C1C PUSH6 0xDF66C91F8E68 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "GT",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x129"
    },
    "53": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13C"
    },
    "64": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14F"
    },
    "75": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x157"
    },
    "86": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "94": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x16A"
    },
    "97": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "98": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "99": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "105": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x17D"
    },
    "108": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA9"
    },
    "112": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMP",
      "path": "1"
    },
    "113": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "121": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "126": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "132": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "137": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "143": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEC"
    },
    "146": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "148": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "154": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "158": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "159": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "EQ",
      "path": "1"
    },
    "165": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "169": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "170": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "DUP1",
      "path": "1"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1300,
        10634
      ],
      "op": "REVERT",
      "path": "1"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x190"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6DF"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "DUP1",
      "path": "1"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SUB",
      "path": "1"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "RETURN",
      "path": "1"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AB"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMP",
      "path": "1"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x222"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMP",
      "path": "1"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "227": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "230": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "231": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "232": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6D4"
    },
    "235": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMP",
      "path": "1"
    },
    "236": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "237": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23F"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMP",
      "path": "1"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "245": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "247": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "248": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "251": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "252": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x913"
    },
    "256": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMP",
      "path": "1"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x670"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMP",
      "path": "1"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x245"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMP",
      "path": "1"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11C"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E5"
    },
    "283": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMP",
      "path": "1"
    },
    "284": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "285": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "288": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "291": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "292": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "293": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x91C"
    },
    "296": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMP",
      "path": "1"
    },
    "297": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x137"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "307": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AB"
    },
    "310": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5650,
        5862
      ],
      "op": "JUMP",
      "path": "1"
    },
    "311": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "312": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2EA"
    },
    "315": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5650,
        5862
      ],
      "op": "JUMP",
      "path": "1"
    },
    "316": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14A"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "326": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x61D"
    },
    "329": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMP",
      "path": "1"
    },
    "330": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "331": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x339"
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMP",
      "path": "1"
    },
    "335": {
      "fn": "ERC20.symbol",
      "offset": [
        2322,
        2424
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "336": {
      "fn": "ERC20.symbol",
      "offset": [
        2322,
        2424
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "339": {
      "fn": "ERC20.symbol",
      "offset": [
        2322,
        2424
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x358"
    },
    "342": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2322,
        2424
      ],
      "op": "JUMP",
      "path": "1"
    },
    "343": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "344": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "347": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x165"
    },
    "350": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "351": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "353": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AB"
    },
    "356": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMP",
      "path": "1"
    },
    "357": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "358": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x367"
    },
    "361": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMP",
      "path": "1"
    },
    "362": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "363": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "366": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "370": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AB"
    },
    "375": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3691,
        3863
      ],
      "op": "JUMP",
      "path": "1"
    },
    "376": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "377": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3E2"
    },
    "380": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3691,
        3863
      ],
      "op": "JUMP",
      "path": "1"
    },
    "381": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "382": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "385": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x18B"
    },
    "388": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "389": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "391": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x63E"
    },
    "394": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMP",
      "path": "1"
    },
    "395": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "396": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3F6"
    },
    "399": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMP",
      "path": "1"
    },
    "400": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "401": {
      "fn": "ERC20.name",
      "offset": [
        2165,
        2178
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "403": {
      "fn": "ERC20.name",
      "offset": [
        2197,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x3"
    },
    "405": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "406": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "407": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19F"
    },
    "410": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x959"
    },
    "414": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMP",
      "path": "1"
    },
    "415": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "416": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "417": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "419": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "420": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "422": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "423": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "424": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DIV",
      "path": "1"
    },
    "425": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MUL",
      "path": "1"
    },
    "426": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "429": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "432": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "433": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP2",
      "path": "1"
    },
    "434": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "435": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "438": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "439": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "440": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "441": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "442": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP2",
      "path": "1"
    },
    "443": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP2",
      "path": "1"
    },
    "444": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "445": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "447": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "448": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP3",
      "path": "1"
    },
    "449": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "450": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "451": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1CB"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x959"
    },
    "458": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMP",
      "path": "1"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "462": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x218"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "466": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "467": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "LT",
      "path": "1"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1ED"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP4",
      "path": "1"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DIV",
      "path": "1"
    },
    "481": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MUL",
      "path": "1"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP4",
      "path": "1"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "484": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x218"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMP",
      "path": "1"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP3",
      "path": "1"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "500": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "506": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "507": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP2",
      "path": "1"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "510": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP2",
      "path": "1"
    },
    "511": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "512": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "517": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP1",
      "path": "1"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP4",
      "path": "1"
    },
    "522": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "GT",
      "path": "1"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1FB"
    },
    "526": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP3",
      "path": "1"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SUB",
      "path": "1"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "AND",
      "path": "1"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "DUP3",
      "path": "1"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "ADD",
      "path": "1"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2190,
        2202
      ],
      "op": "POP",
      "path": "1"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2111,
        2209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "545": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2111,
        2209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "546": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "547": {
      "fn": "ERC20.approve",
      "offset": [
        4291,
        4295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "549": {
      "fn": "ERC20.approve",
      "offset": [
        4307,
        4346
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 1,
      "value": "0x236"
    },
    "552": {
      "fn": "ERC20.approve",
      "offset": [
        4316,
        4328
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x22F"
    },
    "555": {
      "fn": "ERC20.approve",
      "offset": [
        4316,
        4326
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "558": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4316,
        4328
      ],
      "op": "JUMP",
      "path": "1"
    },
    "559": {
      "fn": "ERC20.approve",
      "offset": [
        4316,
        4328
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "560": {
      "fn": "ERC20.approve",
      "offset": [
        4330,
        4337
      ],
      "op": "DUP5",
      "path": "1"
    },
    "561": {
      "fn": "ERC20.approve",
      "offset": [
        4339,
        4345
      ],
      "op": "DUP5",
      "path": "1"
    },
    "562": {
      "fn": "ERC20.approve",
      "offset": [
        4307,
        4315
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x425"
    },
    "565": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4307,
        4346
      ],
      "op": "JUMP",
      "path": "1"
    },
    "566": {
      "fn": "ERC20.approve",
      "offset": [
        4307,
        4346
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "fn": "ERC20.approve",
      "offset": [
        4363,
        4367
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x1"
    },
    "570": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "571": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "572": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "POP",
      "path": "1"
    },
    "573": {
      "fn": "ERC20.approve",
      "offset": [
        4208,
        4374
      ],
      "op": "POP",
      "path": "1"
    },
    "574": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4208,
        4374
      ],
      "op": "JUMP",
      "path": "1"
    },
    "575": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "576": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3286,
        3298
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 3,
      "value": "0x2"
    },
    "578": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3286,
        3298
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "579": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3199,
        3305
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "580": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3199,
        3305
      ],
      "op": "JUMP",
      "path": "1"
    },
    "581": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "582": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4947,
        4951
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "584": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        4999
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 4,
      "value": "0x252"
    },
    "587": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4973,
        4979
      ],
      "op": "DUP5",
      "path": "1"
    },
    "588": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4981,
        4990
      ],
      "op": "DUP5",
      "path": "1"
    },
    "589": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4992,
        4998
      ],
      "op": "DUP5",
      "path": "1"
    },
    "590": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        4972
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4D9"
    },
    "593": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4963,
        4999
      ],
      "op": "JUMP",
      "path": "1"
    },
    "594": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        4999
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "SUB"
    },
    "603": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "DUP5",
      "path": "1"
    },
    "604": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "AND",
      "path": "1"
    },
    "605": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5010,
        5034
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "607": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "608": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "DUP2",
      "path": "1"
    },
    "609": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "610": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5048
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "612": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "614": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "615": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "617": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "DUP2",
      "path": "1"
    },
    "618": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5056
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "619": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5010,
        5034
      ],
      "op": "DUP2",
      "path": "1"
    },
    "620": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5057,
        5069
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x273"
    },
    "623": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5057,
        5067
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "626": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5057,
        5069
      ],
      "op": "JUMP",
      "path": "1"
    },
    "627": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5057,
        5069
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "634": {
      "op": "SHL"
    },
    "635": {
      "op": "SUB"
    },
    "636": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "AND",
      "path": "1"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "643": {
      "op": "SHL"
    },
    "644": {
      "op": "SUB"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "AND",
      "path": "1"
    },
    "646": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP2",
      "path": "1"
    },
    "647": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "650": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "ADD",
      "path": "1"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "652": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP2",
      "path": "1"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "654": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "656": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "ADD",
      "path": "1"
    },
    "657": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "659": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "660": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5037,
        5070
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "661": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5010,
        5070
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "662": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5010,
        5070
      ],
      "op": "POP",
      "path": "1"
    },
    "663": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5108,
        5114
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 5
    },
    "664": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5088,
        5104
      ],
      "op": "DUP2",
      "path": "1"
    },
    "665": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5088,
        5114
      ],
      "op": "LT",
      "path": "1"
    },
    "666": {
      "branch": 29,
      "fn": "ERC20.transferFrom",
      "offset": [
        5088,
        5114
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "667": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2BF"
    },
    "670": {
      "branch": 29,
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "671": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "673": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "674": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "DUP2",
      "path": "1"
    },
    "682": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "683": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "685": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "ADD",
      "path": "1"
    },
    "686": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "689": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "690": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7FD"
    },
    "693": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5080,
        5159
      ],
      "op": "JUMP",
      "path": "1"
    },
    "694": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "695": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "697": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "698": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "DUP1",
      "path": "1"
    },
    "699": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "700": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "SUB",
      "path": "1"
    },
    "701": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "702": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "703": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5080,
        5159
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "704": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5169,
        5226
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 6,
      "value": "0x2DA"
    },
    "707": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5178,
        5184
      ],
      "op": "DUP6",
      "path": "1"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5198
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2CB"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5196
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5186,
        5198
      ],
      "op": "JUMP",
      "path": "1"
    },
    "715": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5198
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "716": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5200,
        5225
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2D5"
    },
    "719": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5219,
        5225
      ],
      "op": "DUP7",
      "path": "1"
    },
    "720": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5200,
        5216
      ],
      "op": "DUP6",
      "path": "1"
    },
    "721": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5200,
        5225
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x942"
    },
    "724": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5200,
        5225
      ],
      "op": "JUMP",
      "path": "1"
    },
    "725": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5200,
        5225
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "726": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5169,
        5177
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x425"
    },
    "729": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5169,
        5226
      ],
      "op": "JUMP",
      "path": "1"
    },
    "730": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5169,
        5226
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5244,
        5248
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 7,
      "value": "0x1"
    },
    "734": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5244,
        5248
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "735": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4841,
        5255
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "736": {
      "op": "POP"
    },
    "737": {
      "op": "POP"
    },
    "738": {
      "op": "POP"
    },
    "739": {
      "op": "POP"
    },
    "740": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4841,
        5255
      ],
      "op": "JUMP",
      "path": "1"
    },
    "741": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "742": {
      "fn": "ERC20.decimals",
      "offset": [
        3130,
        3132
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 8,
      "value": "0x12"
    },
    "744": {
      "fn": "ERC20.decimals",
      "offset": [
        3048,
        3139
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "745": {
      "fn": "ERC20.decimals",
      "jump": "o",
      "offset": [
        3048,
        3139
      ],
      "op": "JUMP",
      "path": "1"
    },
    "746": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5650,
        5862
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "747": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5738,
        5742
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "749": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5754,
        5834
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 9,
      "value": "0x236"
    },
    "752": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5763,
        5775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2F7"
    },
    "755": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5763,
        5773
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "758": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5763,
        5775
      ],
      "op": "JUMP",
      "path": "1"
    },
    "759": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5763,
        5775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "760": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5777,
        5784
      ],
      "op": "DUP5",
      "path": "1"
    },
    "761": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5833
      ],
      "op": "DUP5",
      "path": "1"
    },
    "762": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5797
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "764": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "766": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5798,
        5810
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x305"
    },
    "769": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5798,
        5808
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "772": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5798,
        5810
      ],
      "op": "JUMP",
      "path": "1"
    },
    "773": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5798,
        5810
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "776": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "778": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "780": {
      "op": "SHL"
    },
    "781": {
      "op": "SUB"
    },
    "782": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "783": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP2",
      "path": "1"
    },
    "784": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "AND",
      "path": "1"
    },
    "785": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP3",
      "path": "1"
    },
    "786": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "787": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "789": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP1",
      "path": "1"
    },
    "790": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP4",
      "path": "1"
    },
    "791": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "ADD",
      "path": "1"
    },
    "792": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "793": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "794": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "795": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "796": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "798": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "799": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP3",
      "path": "1"
    },
    "800": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "ADD",
      "path": "1"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "803": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "804": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "DUP2",
      "path": "1"
    },
    "805": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5811
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "806": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "807": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "DUP12",
      "path": "1"
    },
    "808": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "AND",
      "path": "1"
    },
    "809": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "DUP2",
      "path": "1"
    },
    "810": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "811": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "812": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "813": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "814": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "815": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5820
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "816": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5833
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2D5"
    },
    "819": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5833
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "820": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5833
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "821": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5786,
        5833
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x92A"
    },
    "824": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5786,
        5833
      ],
      "op": "JUMP",
      "path": "1"
    },
    "825": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "828": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "830": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "832": {
      "op": "SHL"
    },
    "833": {
      "op": "SUB"
    },
    "834": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 10
    },
    "835": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "AND",
      "path": "1"
    },
    "836": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3437,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "838": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "839": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "DUP2",
      "path": "1"
    },
    "840": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "841": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "843": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "DUP2",
      "path": "1"
    },
    "844": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "845": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "846": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "848": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "849": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "850": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3463,
        3481
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "851": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "852": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "853": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "854": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3363,
        3488
      ],
      "op": "POP",
      "path": "1"
    },
    "855": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3363,
        3488
      ],
      "op": "JUMP",
      "path": "1"
    },
    "856": {
      "fn": "ERC20.symbol",
      "offset": [
        2322,
        2424
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "857": {
      "fn": "ERC20.symbol",
      "offset": [
        2378,
        2391
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "859": {
      "fn": "ERC20.symbol",
      "offset": [
        2410,
        2417
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x4"
    },
    "861": {
      "fn": "ERC20.symbol",
      "offset": [
        2403,
        2417
      ],
      "op": "DUP1",
      "path": "1"
    },
    "862": {
      "fn": "ERC20.symbol",
      "offset": [
        2403,
        2417
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "863": {
      "fn": "ERC20.symbol",
      "offset": [
        2403,
        2417
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19F"
    },
    "866": {
      "fn": "ERC20.symbol",
      "offset": [
        2403,
        2417
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "867": {
      "fn": "ERC20.symbol",
      "offset": [
        2403,
        2417
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x959"
    },
    "870": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2403,
        2417
      ],
      "op": "JUMP",
      "path": "1"
    },
    "871": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "872": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6442,
        6446
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "874": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6458,
        6482
      ],
      "op": "DUP1",
      "path": "1"
    },
    "875": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6496
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "877": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "879": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6497,
        6509
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x376"
    },
    "882": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6497,
        6507
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "885": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6497,
        6509
      ],
      "op": "JUMP",
      "path": "1"
    },
    "886": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6497,
        6509
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "891": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "893": {
      "op": "SHL"
    },
    "894": {
      "op": "SUB"
    },
    "895": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "896": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP2",
      "path": "1"
    },
    "897": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "AND",
      "path": "1"
    },
    "898": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP3",
      "path": "1"
    },
    "899": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "900": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "902": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP1",
      "path": "1"
    },
    "903": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP4",
      "path": "1"
    },
    "904": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "ADD",
      "path": "1"
    },
    "905": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "906": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "907": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "908": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "909": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "911": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "912": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP3",
      "path": "1"
    },
    "913": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "ADD",
      "path": "1"
    },
    "914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "916": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "917": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "DUP2",
      "path": "1"
    },
    "918": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6510
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "919": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "920": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "DUP9",
      "path": "1"
    },
    "921": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "AND",
      "path": "1"
    },
    "922": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "DUP2",
      "path": "1"
    },
    "923": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "924": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "925": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "926": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "927": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "928": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "929": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6519
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "930": {
      "op": "POP"
    },
    "931": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6537,
        6572
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 12
    },
    "932": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6537,
        6572
      ],
      "op": "DUP2",
      "path": "1"
    },
    "933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6537,
        6572
      ],
      "op": "LT",
      "path": "1"
    },
    "934": {
      "branch": 30,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6537,
        6572
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "935": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3C2"
    },
    "938": {
      "branch": 30,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "939": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "941": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "942": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "946": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "948": {
      "op": "SHL"
    },
    "949": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "DUP2",
      "path": "1"
    },
    "950": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "951": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "953": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "ADD",
      "path": "1"
    },
    "954": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "957": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "958": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8CE"
    },
    "961": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6529,
        6614
      ],
      "op": "JUMP",
      "path": "1"
    },
    "962": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6529,
        6614
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "963": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6624,
        6691
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 13,
      "value": "0x3D8"
    },
    "966": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6633,
        6645
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3CD"
    },
    "969": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6633,
        6643
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "972": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6633,
        6645
      ],
      "op": "JUMP",
      "path": "1"
    },
    "973": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6633,
        6645
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "974": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6647,
        6654
      ],
      "op": "DUP6",
      "path": "1"
    },
    "975": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6656,
        6690
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2D5"
    },
    "978": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6690
      ],
      "op": "DUP7",
      "path": "1"
    },
    "979": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6656,
        6672
      ],
      "op": "DUP6",
      "path": "1"
    },
    "980": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6656,
        6690
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x942"
    },
    "983": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6656,
        6690
      ],
      "op": "JUMP",
      "path": "1"
    },
    "984": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6624,
        6691
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "985": {
      "op": "POP"
    },
    "986": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6709,
        6713
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 14,
      "value": "0x1"
    },
    "988": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6709,
        6713
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "989": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6349,
        6720
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "990": {
      "op": "POP"
    },
    "991": {
      "op": "POP"
    },
    "992": {
      "op": "POP"
    },
    "993": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6349,
        6720
      ],
      "op": "JUMP",
      "path": "1"
    },
    "994": {
      "fn": "ERC20.transfer",
      "offset": [
        3691,
        3863
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "995": {
      "fn": "ERC20.transfer",
      "offset": [
        3777,
        3781
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "997": {
      "fn": "ERC20.transfer",
      "offset": [
        3793,
        3835
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 15,
      "value": "0x236"
    },
    "1000": {
      "fn": "ERC20.transfer",
      "offset": [
        3803,
        3815
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3EF"
    },
    "1003": {
      "fn": "ERC20.transfer",
      "offset": [
        3803,
        3813
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x421"
    },
    "1006": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3803,
        3815
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1007": {
      "fn": "ERC20.transfer",
      "offset": [
        3803,
        3815
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1008": {
      "fn": "ERC20.transfer",
      "offset": [
        3817,
        3826
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1009": {
      "fn": "ERC20.transfer",
      "offset": [
        3828,
        3834
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1010": {
      "fn": "ERC20.transfer",
      "offset": [
        3793,
        3802
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4D9"
    },
    "1013": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3793,
        3835
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1014": {
      "fn": "ERC20.allowance",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1019": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1021": {
      "op": "SHL"
    },
    "1022": {
      "op": "SUB"
    },
    "1023": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 16
    },
    "1024": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1025": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "AND",
      "path": "1"
    },
    "1026": {
      "fn": "ERC20.allowance",
      "offset": [
        4010,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1028": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1029": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1030": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1031": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4047
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1033": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1035": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1036": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1037": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1038": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1040": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1041": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1042": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4054
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1043": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1044": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1045": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1046": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "AND",
      "path": "1"
    },
    "1047": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1048": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1049": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1050": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1051": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1052": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1053": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1054": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1055": {
      "fn": "ERC20.allowance",
      "offset": [
        4036,
        4063
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1056": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3921,
        4070
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1057": {
      "fn": "Context._msgSender",
      "offset": [
        613,
        728
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1058": {
      "fn": "Context._msgSender",
      "offset": [
        709,
        719
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 17
    },
    "1059": {
      "fn": "Context._msgSender",
      "offset": [
        613,
        728
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1060": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        613,
        728
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1061": {
      "fn": "ERC20._approve",
      "offset": [
        9613,
        9953
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "op": "SUB"
    },
    "1070": {
      "fn": "ERC20._approve",
      "offset": [
        9714,
        9733
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 18
    },
    "1071": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9714,
        9733
      ],
      "op": "AND",
      "path": "1"
    },
    "1072": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x44B"
    },
    "1075": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1076": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1078": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1079": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1085": {
      "op": "SHL"
    },
    "1086": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1087": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1088": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1090": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "ADD",
      "path": "1"
    },
    "1091": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1094": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1095": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x88A"
    },
    "1098": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9706,
        9774
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1099": {
      "fn": "ERC20._approve",
      "offset": [
        9706,
        9774
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1102": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1106": {
      "op": "SHL"
    },
    "1107": {
      "op": "SUB"
    },
    "1108": {
      "fn": "ERC20._approve",
      "offset": [
        9792,
        9813
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 19
    },
    "1109": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        9792,
        9813
      ],
      "op": "AND",
      "path": "1"
    },
    "1110": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x471"
    },
    "1113": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1114": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1116": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1117": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1121": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1123": {
      "op": "SHL"
    },
    "1124": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1125": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1126": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1128": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "ADD",
      "path": "1"
    },
    "1129": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1132": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1133": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x775"
    },
    "1136": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9784,
        9852
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1137": {
      "fn": "ERC20._approve",
      "offset": [
        9784,
        9852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1144": {
      "op": "SHL"
    },
    "1145": {
      "op": "SUB"
    },
    "1146": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 20
    },
    "1147": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1148": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "AND",
      "path": "1"
    },
    "1149": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1151": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1152": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1153": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1154": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9874
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1156": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1158": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1159": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1160": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1161": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1163": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1164": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1165": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9881
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1166": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1167": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1168": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "AND",
      "path": "1"
    },
    "1169": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1170": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1171": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1172": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1173": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1174": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1175": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1176": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1177": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1178": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1179": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9890
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1180": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9899
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1181": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9899
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1182": {
      "fn": "ERC20._approve",
      "offset": [
        9863,
        9899
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1183": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 21
    },
    "1184": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1217": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1218": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4CC"
    },
    "1221": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1222": {
      "fn": "ERC20._approve",
      "offset": [
        9893,
        9899
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1223": {
      "fn": "ERC20._approve",
      "offset": [
        9893,
        9899
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1224": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x913"
    },
    "1227": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9914,
        9946
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1228": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1229": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1231": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1232": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1233": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1234": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "SUB",
      "path": "1"
    },
    "1235": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1236": {
      "fn": "ERC20._approve",
      "offset": [
        9914,
        9946
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1237": {
      "fn": "ERC20._approve",
      "offset": [
        9613,
        9953
      ],
      "op": "POP",
      "path": "1"
    },
    "1238": {
      "fn": "ERC20._approve",
      "offset": [
        9613,
        9953
      ],
      "op": "POP",
      "path": "1"
    },
    "1239": {
      "fn": "ERC20._approve",
      "offset": [
        9613,
        9953
      ],
      "op": "POP",
      "path": "1"
    },
    "1240": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9613,
        9953
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1241": {
      "fn": "ERC20._transfer",
      "offset": [
        7194,
        7786
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1248": {
      "op": "SHL"
    },
    "1249": {
      "op": "SUB"
    },
    "1250": {
      "fn": "ERC20._transfer",
      "offset": [
        7299,
        7319
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 22
    },
    "1251": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7299,
        7319
      ],
      "op": "AND",
      "path": "1"
    },
    "1252": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4FF"
    },
    "1255": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1256": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1258": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1259": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1265": {
      "op": "SHL"
    },
    "1266": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1267": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1268": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1270": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "ADD",
      "path": "1"
    },
    "1271": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1274": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1275": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x845"
    },
    "1278": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7291,
        7361
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1279": {
      "fn": "ERC20._transfer",
      "offset": [
        7291,
        7361
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1286": {
      "op": "SHL"
    },
    "1287": {
      "op": "SUB"
    },
    "1288": {
      "fn": "ERC20._transfer",
      "offset": [
        7379,
        7402
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 23
    },
    "1289": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7379,
        7402
      ],
      "op": "AND",
      "path": "1"
    },
    "1290": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x525"
    },
    "1293": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1294": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1296": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1297": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1301": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1303": {
      "op": "SHL"
    },
    "1304": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1305": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1306": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1308": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "ADD",
      "path": "1"
    },
    "1309": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1312": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1313": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x732"
    },
    "1316": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7371,
        7442
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1317": {
      "fn": "ERC20._transfer",
      "offset": [
        7371,
        7442
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1318": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7500
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 24,
      "value": "0x530"
    },
    "1321": {
      "fn": "ERC20._transfer",
      "offset": [
        7474,
        7480
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1322": {
      "fn": "ERC20._transfer",
      "offset": [
        7482,
        7491
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1323": {
      "fn": "ERC20._transfer",
      "offset": [
        7493,
        7499
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1324": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7473
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x601"
    },
    "1327": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7453,
        7500
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1328": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7500
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1333": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1335": {
      "op": "SHL"
    },
    "1336": {
      "op": "SUB"
    },
    "1337": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1338": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "AND",
      "path": "1"
    },
    "1339": {
      "fn": "ERC20._transfer",
      "offset": [
        7511,
        7532
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1341": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1342": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1344": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1346": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1347": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1348": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1349": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1351": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1352": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1353": {
      "fn": "ERC20._transfer",
      "offset": [
        7535,
        7552
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1354": {
      "fn": "ERC20._transfer",
      "offset": [
        7570,
        7593
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 25
    },
    "1355": {
      "fn": "ERC20._transfer",
      "offset": [
        7570,
        7593
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1356": {
      "fn": "ERC20._transfer",
      "offset": [
        7570,
        7593
      ],
      "op": "LT",
      "path": "1"
    },
    "1357": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7570,
        7593
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1358": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x569"
    },
    "1361": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1362": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1364": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1365": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1371": {
      "op": "SHL"
    },
    "1372": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1373": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1374": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1376": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "ADD",
      "path": "1"
    },
    "1377": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1380": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1381": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B7"
    },
    "1384": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7562,
        7636
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1385": {
      "fn": "ERC20._transfer",
      "offset": [
        7562,
        7636
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1386": {
      "fn": "ERC20._transfer",
      "offset": [
        7666,
        7688
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 26,
      "value": "0x573"
    },
    "1389": {
      "fn": "ERC20._transfer",
      "offset": [
        7682,
        7688
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1390": {
      "fn": "ERC20._transfer",
      "offset": [
        7666,
        7679
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1391": {
      "fn": "ERC20._transfer",
      "offset": [
        7666,
        7688
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x942"
    },
    "1394": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7666,
        7688
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1395": {
      "fn": "ERC20._transfer",
      "offset": [
        7666,
        7688
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1398": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1400": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1402": {
      "op": "SHL"
    },
    "1403": {
      "op": "SUB"
    },
    "1404": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1405": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1406": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "AND",
      "path": "1"
    },
    "1407": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7655
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1409": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1410": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1411": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1412": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1414": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1415": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1416": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1417": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1419": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1420": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1421": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7663
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1422": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7688
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1423": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7688
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1424": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7688
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1425": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7688
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1426": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 27
    },
    "1427": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1428": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "AND",
      "path": "1"
    },
    "1429": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1430": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1431": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1432": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1433": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7718
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1434": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1435": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1436": {
      "fn": "ERC20._transfer",
      "offset": [
        7722,
        7728
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1437": {
      "fn": "ERC20._transfer",
      "offset": [
        7722,
        7728
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1438": {
      "fn": "ERC20._transfer",
      "offset": [
        7646,
        7655
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1439": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5A9"
    },
    "1442": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1443": {
      "fn": "ERC20._transfer",
      "offset": [
        7722,
        7728
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1444": {
      "fn": "ERC20._transfer",
      "offset": [
        7722,
        7728
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1445": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x92A"
    },
    "1448": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7698,
        7728
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1449": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1450": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1451": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "POP",
      "path": "1"
    },
    "1452": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "POP",
      "path": "1"
    },
    "1453": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1454": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1455": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1456": {
      "fn": "ERC20._transfer",
      "offset": [
        7698,
        7728
      ],
      "op": "POP",
      "path": "1"
    },
    "1457": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 28
    },
    "1458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1460": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1462": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1464": {
      "op": "SHL"
    },
    "1465": {
      "op": "SUB"
    },
    "1466": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "AND",
      "path": "1"
    },
    "1467": {
      "fn": "ERC20._transfer",
      "offset": [
        7753,
        7759
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1474": {
      "op": "SHL"
    },
    "1475": {
      "op": "SUB"
    },
    "1476": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "AND",
      "path": "1"
    },
    "1477": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1510": {
      "fn": "ERC20._transfer",
      "offset": [
        7772,
        7778
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1511": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1513": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1514": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5F3"
    },
    "1517": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1518": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1519": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x913"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7744,
        7779
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1524": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1526": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1527": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1528": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1529": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "SUB",
      "path": "1"
    },
    "1530": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1531": {
      "fn": "ERC20._transfer",
      "offset": [
        7744,
        7779
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1532": {
      "fn": "ERC20._transfer",
      "offset": [
        7194,
        7786
      ],
      "op": "POP",
      "path": "1"
    },
    "1533": {
      "fn": "ERC20._transfer",
      "offset": [
        7194,
        7786
      ],
      "op": "POP",
      "path": "1"
    },
    "1534": {
      "fn": "ERC20._transfer",
      "offset": [
        7194,
        7786
      ],
      "op": "POP",
      "path": "1"
    },
    "1535": {
      "fn": "ERC20._transfer",
      "offset": [
        7194,
        7786
      ],
      "op": "POP",
      "path": "1"
    },
    "1536": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7194,
        7786
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1537": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10540,
        10632
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1538": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10540,
        10632
      ],
      "op": "POP",
      "path": "1"
    },
    "1539": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10540,
        10632
      ],
      "op": "POP",
      "path": "1"
    },
    "1540": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10540,
        10632
      ],
      "op": "POP",
      "path": "1"
    },
    "1541": {
      "fn": "ERC20._beforeTokenTransfer",
      "jump": "o",
      "offset": [
        10540,
        10632
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1542": {
      "op": "JUMPDEST"
    },
    "1543": {
      "op": "DUP1"
    },
    "1544": {
      "op": "CALLDATALOAD"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1549": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1551": {
      "op": "SHL"
    },
    "1552": {
      "op": "SUB"
    },
    "1553": {
      "op": "DUP2"
    },
    "1554": {
      "op": "AND"
    },
    "1555": {
      "op": "DUP2"
    },
    "1556": {
      "op": "EQ"
    },
    "1557": {
      "op": "PUSH2",
      "value": "0x353"
    },
    "1560": {
      "op": "JUMPI"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1563": {
      "op": "DUP1"
    },
    "1564": {
      "op": "REVERT"
    },
    "1565": {
      "op": "JUMPDEST"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1570": {
      "op": "DUP3"
    },
    "1571": {
      "op": "DUP5"
    },
    "1572": {
      "op": "SUB"
    },
    "1573": {
      "op": "SLT"
    },
    "1574": {
      "op": "ISZERO"
    },
    "1575": {
      "op": "PUSH2",
      "value": "0x62E"
    },
    "1578": {
      "op": "JUMPI"
    },
    "1579": {
      "op": "DUP1"
    },
    "1580": {
      "op": "DUP2"
    },
    "1581": {
      "op": "REVERT"
    },
    "1582": {
      "op": "JUMPDEST"
    },
    "1583": {
      "op": "PUSH2",
      "value": "0x637"
    },
    "1586": {
      "op": "DUP3"
    },
    "1587": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1590": {
      "jump": "i",
      "op": "JUMP"
    },
    "1591": {
      "op": "JUMPDEST"
    },
    "1592": {
      "op": "SWAP4"
    },
    "1593": {
      "op": "SWAP3"
    },
    "1594": {
      "op": "POP"
    },
    "1595": {
      "op": "POP"
    },
    "1596": {
      "op": "POP"
    },
    "1597": {
      "jump": "o",
      "op": "JUMP"
    },
    "1598": {
      "op": "JUMPDEST"
    },
    "1599": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1601": {
      "op": "DUP1"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1604": {
      "op": "DUP4"
    },
    "1605": {
      "op": "DUP6"
    },
    "1606": {
      "op": "SUB"
    },
    "1607": {
      "op": "SLT"
    },
    "1608": {
      "op": "ISZERO"
    },
    "1609": {
      "op": "PUSH2",
      "value": "0x650"
    },
    "1612": {
      "op": "JUMPI"
    },
    "1613": {
      "op": "DUP1"
    },
    "1614": {
      "op": "DUP2"
    },
    "1615": {
      "op": "REVERT"
    },
    "1616": {
      "op": "JUMPDEST"
    },
    "1617": {
      "op": "PUSH2",
      "value": "0x659"
    },
    "1620": {
      "op": "DUP4"
    },
    "1621": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1624": {
      "jump": "i",
      "op": "JUMP"
    },
    "1625": {
      "op": "JUMPDEST"
    },
    "1626": {
      "op": "SWAP2"
    },
    "1627": {
      "op": "POP"
    },
    "1628": {
      "op": "PUSH2",
      "value": "0x667"
    },
    "1631": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1633": {
      "op": "DUP5"
    },
    "1634": {
      "op": "ADD"
    },
    "1635": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1638": {
      "jump": "i",
      "op": "JUMP"
    },
    "1639": {
      "op": "JUMPDEST"
    },
    "1640": {
      "op": "SWAP1"
    },
    "1641": {
      "op": "POP"
    },
    "1642": {
      "op": "SWAP3"
    },
    "1643": {
      "op": "POP"
    },
    "1644": {
      "op": "SWAP3"
    },
    "1645": {
      "op": "SWAP1"
    },
    "1646": {
      "op": "POP"
    },
    "1647": {
      "jump": "o",
      "op": "JUMP"
    },
    "1648": {
      "op": "JUMPDEST"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1651": {
      "op": "DUP1"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1654": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1656": {
      "op": "DUP5"
    },
    "1657": {
      "op": "DUP7"
    },
    "1658": {
      "op": "SUB"
    },
    "1659": {
      "op": "SLT"
    },
    "1660": {
      "op": "ISZERO"
    },
    "1661": {
      "op": "PUSH2",
      "value": "0x684"
    },
    "1664": {
      "op": "JUMPI"
    },
    "1665": {
      "op": "DUP1"
    },
    "1666": {
      "op": "DUP2"
    },
    "1667": {
      "op": "REVERT"
    },
    "1668": {
      "op": "JUMPDEST"
    },
    "1669": {
      "op": "PUSH2",
      "value": "0x68D"
    },
    "1672": {
      "op": "DUP5"
    },
    "1673": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1676": {
      "jump": "i",
      "op": "JUMP"
    },
    "1677": {
      "op": "JUMPDEST"
    },
    "1678": {
      "op": "SWAP3"
    },
    "1679": {
      "op": "POP"
    },
    "1680": {
      "op": "PUSH2",
      "value": "0x69B"
    },
    "1683": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1685": {
      "op": "DUP6"
    },
    "1686": {
      "op": "ADD"
    },
    "1687": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1690": {
      "jump": "i",
      "op": "JUMP"
    },
    "1691": {
      "op": "JUMPDEST"
    },
    "1692": {
      "op": "SWAP2"
    },
    "1693": {
      "op": "POP"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1696": {
      "op": "DUP5"
    },
    "1697": {
      "op": "ADD"
    },
    "1698": {
      "op": "CALLDATALOAD"
    },
    "1699": {
      "op": "SWAP1"
    },
    "1700": {
      "op": "POP"
    },
    "1701": {
      "op": "SWAP3"
    },
    "1702": {
      "op": "POP"
    },
    "1703": {
      "op": "SWAP3"
    },
    "1704": {
      "op": "POP"
    },
    "1705": {
      "op": "SWAP3"
    },
    "1706": {
      "jump": "o",
      "op": "JUMP"
    },
    "1707": {
      "op": "JUMPDEST"
    },
    "1708": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1710": {
      "op": "DUP1"
    },
    "1711": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1713": {
      "op": "DUP4"
    },
    "1714": {
      "op": "DUP6"
    },
    "1715": {
      "op": "SUB"
    },
    "1716": {
      "op": "SLT"
    },
    "1717": {
      "op": "ISZERO"
    },
    "1718": {
      "op": "PUSH2",
      "value": "0x6BD"
    },
    "1721": {
      "op": "JUMPI"
    },
    "1722": {
      "op": "DUP2"
    },
    "1723": {
      "op": "DUP3"
    },
    "1724": {
      "op": "REVERT"
    },
    "1725": {
      "op": "JUMPDEST"
    },
    "1726": {
      "op": "PUSH2",
      "value": "0x6C6"
    },
    "1729": {
      "op": "DUP4"
    },
    "1730": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1733": {
      "jump": "i",
      "op": "JUMP"
    },
    "1734": {
      "op": "JUMPDEST"
    },
    "1735": {
      "op": "SWAP5"
    },
    "1736": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1738": {
      "op": "SWAP4"
    },
    "1739": {
      "op": "SWAP1"
    },
    "1740": {
      "op": "SWAP4"
    },
    "1741": {
      "op": "ADD"
    },
    "1742": {
      "op": "CALLDATALOAD"
    },
    "1743": {
      "op": "SWAP4"
    },
    "1744": {
      "op": "POP"
    },
    "1745": {
      "op": "POP"
    },
    "1746": {
      "op": "POP"
    },
    "1747": {
      "jump": "o",
      "op": "JUMP"
    },
    "1748": {
      "op": "JUMPDEST"
    },
    "1749": {
      "op": "SWAP1"
    },
    "1750": {
      "op": "ISZERO"
    },
    "1751": {
      "op": "ISZERO"
    },
    "1752": {
      "op": "DUP2"
    },
    "1753": {
      "op": "MSTORE"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1756": {
      "op": "ADD"
    },
    "1757": {
      "op": "SWAP1"
    },
    "1758": {
      "jump": "o",
      "op": "JUMP"
    },
    "1759": {
      "op": "JUMPDEST"
    },
    "1760": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1762": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1764": {
      "op": "DUP1"
    },
    "1765": {
      "op": "DUP4"
    },
    "1766": {
      "op": "MSTORE"
    },
    "1767": {
      "op": "DUP4"
    },
    "1768": {
      "op": "MLOAD"
    },
    "1769": {
      "op": "DUP1"
    },
    "1770": {
      "op": "DUP3"
    },
    "1771": {
      "op": "DUP6"
    },
    "1772": {
      "op": "ADD"
    },
    "1773": {
      "op": "MSTORE"
    },
    "1774": {
      "op": "DUP3"
    },
    "1775": {
      "op": "JUMPDEST"
    },
    "1776": {
      "op": "DUP2"
    },
    "1777": {
      "op": "DUP2"
    },
    "1778": {
      "op": "LT"
    },
    "1779": {
      "op": "ISZERO"
    },
    "1780": {
      "op": "PUSH2",
      "value": "0x70B"
    },
    "1783": {
      "op": "JUMPI"
    },
    "1784": {
      "op": "DUP6"
    },
    "1785": {
      "op": "DUP2"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "DUP4"
    },
    "1788": {
      "op": "ADD"
    },
    "1789": {
      "op": "MLOAD"
    },
    "1790": {
      "op": "DUP6"
    },
    "1791": {
      "op": "DUP3"
    },
    "1792": {
      "op": "ADD"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1795": {
      "op": "ADD"
    },
    "1796": {
      "op": "MSTORE"
    },
    "1797": {
      "op": "DUP3"
    },
    "1798": {
      "op": "ADD"
    },
    "1799": {
      "op": "PUSH2",
      "value": "0x6EF"
    },
    "1802": {
      "op": "JUMP"
    },
    "1803": {
      "op": "JUMPDEST"
    },
    "1804": {
      "op": "DUP2"
    },
    "1805": {
      "op": "DUP2"
    },
    "1806": {
      "op": "GT"
    },
    "1807": {
      "op": "ISZERO"
    },
    "1808": {
      "op": "PUSH2",
      "value": "0x71C"
    },
    "1811": {
      "op": "JUMPI"
    },
    "1812": {
      "op": "DUP4"
    },
    "1813": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1815": {
      "op": "DUP4"
    },
    "1816": {
      "op": "DUP8"
    },
    "1817": {
      "op": "ADD"
    },
    "1818": {
      "op": "ADD"
    },
    "1819": {
      "op": "MSTORE"
    },
    "1820": {
      "op": "JUMPDEST"
    },
    "1821": {
      "op": "POP"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1824": {
      "op": "ADD"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1827": {
      "op": "NOT"
    },
    "1828": {
      "op": "AND"
    },
    "1829": {
      "op": "SWAP3"
    },
    "1830": {
      "op": "SWAP1"
    },
    "1831": {
      "op": "SWAP3"
    },
    "1832": {
      "op": "ADD"
    },
    "1833": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1835": {
      "op": "ADD"
    },
    "1836": {
      "op": "SWAP4"
    },
    "1837": {
      "op": "SWAP3"
    },
    "1838": {
      "op": "POP"
    },
    "1839": {
      "op": "POP"
    },
    "1840": {
      "op": "POP"
    },
    "1841": {
      "jump": "o",
      "op": "JUMP"
    },
    "1842": {
      "op": "JUMPDEST"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1845": {
      "op": "DUP1"
    },
    "1846": {
      "op": "DUP3"
    },
    "1847": {
      "op": "MSTORE"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1850": {
      "op": "SWAP1"
    },
    "1851": {
      "op": "DUP3"
    },
    "1852": {
      "op": "ADD"
    },
    "1853": {
      "op": "MSTORE"
    },
    "1854": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1889": {
      "op": "DUP3"
    },
    "1890": {
      "op": "ADD"
    },
    "1891": {
      "op": "MSTORE"
    },
    "1892": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1898": {
      "op": "SHL"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1901": {
      "op": "DUP3"
    },
    "1902": {
      "op": "ADD"
    },
    "1903": {
      "op": "MSTORE"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "op": "SWAP1"
    },
    "1908": {
      "jump": "o",
      "op": "JUMP"
    },
    "1909": {
      "op": "JUMPDEST"
    },
    "1910": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1912": {
      "op": "DUP1"
    },
    "1913": {
      "op": "DUP3"
    },
    "1914": {
      "op": "MSTORE"
    },
    "1915": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1917": {
      "op": "SWAP1"
    },
    "1918": {
      "op": "DUP3"
    },
    "1919": {
      "op": "ADD"
    },
    "1920": {
      "op": "MSTORE"
    },
    "1921": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1956": {
      "op": "DUP3"
    },
    "1957": {
      "op": "ADD"
    },
    "1958": {
      "op": "MSTORE"
    },
    "1959": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1964": {
      "op": "SHL"
    },
    "1965": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1967": {
      "op": "DUP3"
    },
    "1968": {
      "op": "ADD"
    },
    "1969": {
      "op": "MSTORE"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1972": {
      "op": "ADD"
    },
    "1973": {
      "op": "SWAP1"
    },
    "1974": {
      "jump": "o",
      "op": "JUMP"
    },
    "1975": {
      "op": "JUMPDEST"
    },
    "1976": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1978": {
      "op": "DUP1"
    },
    "1979": {
      "op": "DUP3"
    },
    "1980": {
      "op": "MSTORE"
    },
    "1981": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1983": {
      "op": "SWAP1"
    },
    "1984": {
      "op": "DUP3"
    },
    "1985": {
      "op": "ADD"
    },
    "1986": {
      "op": "MSTORE"
    },
    "1987": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2020": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2022": {
      "op": "DUP3"
    },
    "2023": {
      "op": "ADD"
    },
    "2024": {
      "op": "MSTORE"
    },
    "2025": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2032": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2034": {
      "op": "SHL"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2037": {
      "op": "DUP3"
    },
    "2038": {
      "op": "ADD"
    },
    "2039": {
      "op": "MSTORE"
    },
    "2040": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2042": {
      "op": "ADD"
    },
    "2043": {
      "op": "SWAP1"
    },
    "2044": {
      "jump": "o",
      "op": "JUMP"
    },
    "2045": {
      "op": "JUMPDEST"
    },
    "2046": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2048": {
      "op": "DUP1"
    },
    "2049": {
      "op": "DUP3"
    },
    "2050": {
      "op": "MSTORE"
    },
    "2051": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2053": {
      "op": "SWAP1"
    },
    "2054": {
      "op": "DUP3"
    },
    "2055": {
      "op": "ADD"
    },
    "2056": {
      "op": "MSTORE"
    },
    "2057": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2090": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2092": {
      "op": "DUP3"
    },
    "2093": {
      "op": "ADD"
    },
    "2094": {
      "op": "MSTORE"
    },
    "2095": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2104": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2106": {
      "op": "SHL"
    },
    "2107": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2109": {
      "op": "DUP3"
    },
    "2110": {
      "op": "ADD"
    },
    "2111": {
      "op": "MSTORE"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2114": {
      "op": "ADD"
    },
    "2115": {
      "op": "SWAP1"
    },
    "2116": {
      "jump": "o",
      "op": "JUMP"
    },
    "2117": {
      "op": "JUMPDEST"
    },
    "2118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2120": {
      "op": "DUP1"
    },
    "2121": {
      "op": "DUP3"
    },
    "2122": {
      "op": "MSTORE"
    },
    "2123": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2125": {
      "op": "SWAP1"
    },
    "2126": {
      "op": "DUP3"
    },
    "2127": {
      "op": "ADD"
    },
    "2128": {
      "op": "MSTORE"
    },
    "2129": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "2162": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2164": {
      "op": "DUP3"
    },
    "2165": {
      "op": "ADD"
    },
    "2166": {
      "op": "MSTORE"
    },
    "2167": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "2173": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2175": {
      "op": "SHL"
    },
    "2176": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2178": {
      "op": "DUP3"
    },
    "2179": {
      "op": "ADD"
    },
    "2180": {
      "op": "MSTORE"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2183": {
      "op": "ADD"
    },
    "2184": {
      "op": "SWAP1"
    },
    "2185": {
      "jump": "o",
      "op": "JUMP"
    },
    "2186": {
      "op": "JUMPDEST"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2189": {
      "op": "DUP1"
    },
    "2190": {
      "op": "DUP3"
    },
    "2191": {
      "op": "MSTORE"
    },
    "2192": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2194": {
      "op": "SWAP1"
    },
    "2195": {
      "op": "DUP3"
    },
    "2196": {
      "op": "ADD"
    },
    "2197": {
      "op": "MSTORE"
    },
    "2198": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "2231": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2233": {
      "op": "DUP3"
    },
    "2234": {
      "op": "ADD"
    },
    "2235": {
      "op": "MSTORE"
    },
    "2236": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "2241": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2243": {
      "op": "SHL"
    },
    "2244": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2246": {
      "op": "DUP3"
    },
    "2247": {
      "op": "ADD"
    },
    "2248": {
      "op": "MSTORE"
    },
    "2249": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2251": {
      "op": "ADD"
    },
    "2252": {
      "op": "SWAP1"
    },
    "2253": {
      "jump": "o",
      "op": "JUMP"
    },
    "2254": {
      "op": "JUMPDEST"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2257": {
      "op": "DUP1"
    },
    "2258": {
      "op": "DUP3"
    },
    "2259": {
      "op": "MSTORE"
    },
    "2260": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2262": {
      "op": "SWAP1"
    },
    "2263": {
      "op": "DUP3"
    },
    "2264": {
      "op": "ADD"
    },
    "2265": {
      "op": "MSTORE"
    },
    "2266": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2301": {
      "op": "DUP3"
    },
    "2302": {
      "op": "ADD"
    },
    "2303": {
      "op": "MSTORE"
    },
    "2304": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "2310": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2312": {
      "op": "SHL"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2315": {
      "op": "DUP3"
    },
    "2316": {
      "op": "ADD"
    },
    "2317": {
      "op": "MSTORE"
    },
    "2318": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2320": {
      "op": "ADD"
    },
    "2321": {
      "op": "SWAP1"
    },
    "2322": {
      "jump": "o",
      "op": "JUMP"
    },
    "2323": {
      "op": "JUMPDEST"
    },
    "2324": {
      "op": "SWAP1"
    },
    "2325": {
      "op": "DUP2"
    },
    "2326": {
      "op": "MSTORE"
    },
    "2327": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2329": {
      "op": "ADD"
    },
    "2330": {
      "op": "SWAP1"
    },
    "2331": {
      "jump": "o",
      "op": "JUMP"
    },
    "2332": {
      "op": "JUMPDEST"
    },
    "2333": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2335": {
      "op": "SWAP2"
    },
    "2336": {
      "op": "SWAP1"
    },
    "2337": {
      "op": "SWAP2"
    },
    "2338": {
      "op": "AND"
    },
    "2339": {
      "op": "DUP2"
    },
    "2340": {
      "op": "MSTORE"
    },
    "2341": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2343": {
      "op": "ADD"
    },
    "2344": {
      "op": "SWAP1"
    },
    "2345": {
      "jump": "o",
      "op": "JUMP"
    },
    "2346": {
      "op": "JUMPDEST"
    },
    "2347": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2349": {
      "op": "DUP3"
    },
    "2350": {
      "op": "NOT"
    },
    "2351": {
      "op": "DUP3"
    },
    "2352": {
      "op": "GT"
    },
    "2353": {
      "op": "ISZERO"
    },
    "2354": {
      "op": "PUSH2",
      "value": "0x93D"
    },
    "2357": {
      "op": "JUMPI"
    },
    "2358": {
      "op": "PUSH2",
      "value": "0x93D"
    },
    "2361": {
      "op": "PUSH2",
      "value": "0x994"
    },
    "2364": {
      "jump": "i",
      "op": "JUMP"
    },
    "2365": {
      "op": "JUMPDEST"
    },
    "2366": {
      "op": "POP"
    },
    "2367": {
      "op": "ADD"
    },
    "2368": {
      "op": "SWAP1"
    },
    "2369": {
      "jump": "o",
      "op": "JUMP"
    },
    "2370": {
      "op": "JUMPDEST"
    },
    "2371": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2373": {
      "op": "DUP3"
    },
    "2374": {
      "op": "DUP3"
    },
    "2375": {
      "op": "LT"
    },
    "2376": {
      "op": "ISZERO"
    },
    "2377": {
      "op": "PUSH2",
      "value": "0x954"
    },
    "2380": {
      "op": "JUMPI"
    },
    "2381": {
      "op": "PUSH2",
      "value": "0x954"
    },
    "2384": {
      "op": "PUSH2",
      "value": "0x994"
    },
    "2387": {
      "jump": "i",
      "op": "JUMP"
    },
    "2388": {
      "op": "JUMPDEST"
    },
    "2389": {
      "op": "POP"
    },
    "2390": {
      "op": "SUB"
    },
    "2391": {
      "op": "SWAP1"
    },
    "2392": {
      "jump": "o",
      "op": "JUMP"
    },
    "2393": {
      "op": "JUMPDEST"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2396": {
      "op": "DUP2"
    },
    "2397": {
      "op": "DIV"
    },
    "2398": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2400": {
      "op": "DUP3"
    },
    "2401": {
      "op": "AND"
    },
    "2402": {
      "op": "DUP1"
    },
    "2403": {
      "op": "PUSH2",
      "value": "0x96D"
    },
    "2406": {
      "op": "JUMPI"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2409": {
      "op": "DUP3"
    },
    "2410": {
      "op": "AND"
    },
    "2411": {
      "op": "SWAP2"
    },
    "2412": {
      "op": "POP"
    },
    "2413": {
      "op": "JUMPDEST"
    },
    "2414": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2416": {
      "op": "DUP3"
    },
    "2417": {
      "op": "LT"
    },
    "2418": {
      "op": "DUP2"
    },
    "2419": {
      "op": "EQ"
    },
    "2420": {
      "op": "ISZERO"
    },
    "2421": {
      "op": "PUSH2",
      "value": "0x98E"
    },
    "2424": {
      "op": "JUMPI"
    },
    "2425": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2430": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2432": {
      "op": "SHL"
    },
    "2433": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2435": {
      "op": "MSTORE"
    },
    "2436": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2438": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2440": {
      "op": "MSTORE"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2445": {
      "op": "REVERT"
    },
    "2446": {
      "op": "JUMPDEST"
    },
    "2447": {
      "op": "POP"
    },
    "2448": {
      "op": "SWAP2"
    },
    "2449": {
      "op": "SWAP1"
    },
    "2450": {
      "op": "POP"
    },
    "2451": {
      "jump": "o",
      "op": "JUMP"
    },
    "2452": {
      "op": "JUMPDEST"
    },
    "2453": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2458": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2460": {
      "op": "SHL"
    },
    "2461": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2463": {
      "op": "MSTORE"
    },
    "2464": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2466": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2468": {
      "op": "MSTORE"
    },
    "2469": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2471": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2473": {
      "op": "REVERT"
    }
  },
  "sha1": "514f29594502202d20d9a5fef503166181c8c446",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_, uint totalSupply_) {\n        _name = name_;\n        _symbol = symbol_;\n        _totalSupply = totalSupply_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}",
  "sourceMap": "1300:9334:1:-:0;;;1876:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1962:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1985:17:1;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2012:12:1;:27;-1:-1:-1;1300:9334:1;;-1:-1:-1;1300:9334:1;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1300:9334:1;;;-1:-1:-1;1300:9334:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:6;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:6;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:6;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:6;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:6;80:815;-1:-1:-1;;;;;80:815:6:o;900:657::-;;;;1077:2;1065:9;1056:7;1052:23;1048:32;1045:2;;;1098:6;1090;1083:22;1045:2;1130:16;;-1:-1:-1;;;;;1195:14:6;;;1192:2;;;1227:6;1219;1212:22;1192:2;1255:63;1310:7;1301:6;1290:9;1286:22;1255:63;:::i;:::-;1245:73;;1364:2;1353:9;1349:18;1343:25;1327:41;;1393:2;1383:8;1380:16;1377:2;;;1414:6;1406;1399:22;1377:2;;1442:65;1499:7;1488:8;1477:9;1473:24;1442:65;:::i;:::-;1432:75;;;1547:2;1536:9;1532:18;1526:25;1516:35;;1035:522;;;;;:::o;1562:380::-;1647:1;1637:12;;1694:1;1684:12;;;1705:2;;1759:4;1751:6;1747:17;1737:27;;1705:2;1812;1804:6;1801:14;1781:18;1778:38;1775:2;;;1858:10;1853:3;1849:20;1846:1;1839:31;1893:4;1890:1;1883:15;1921:4;1918:1;1911:15;1775:2;;1617:325;;;:::o;1947:127::-;2008:10;2003:3;1999:20;1996:1;1989:31;2039:4;2036:1;2029:15;2063:4;2060:1;2053:15;1979:95;1300:9334:1;;;;;;",
  "sourcePath": "contracts/ERC20.sol",
  "type": "contract"
}